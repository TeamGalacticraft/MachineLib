/*
 * Copyright (c) 2021-2022 Team Galacticraft
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package dev.galacticraft.machinelib.client.impl.model;

import com.google.common.collect.ImmutableList;
import com.mojang.datafixers.util.Pair;
import dev.galacticraft.machinelib.client.api.model.MachineModelRegistry;
import dev.galacticraft.machinelib.client.impl.util.SpriteUtil;
import dev.galacticraft.machinelib.impl.Constant;
import net.minecraft.client.renderer.texture.TextureAtlasSprite;
import net.minecraft.client.resources.model.*;
import net.minecraft.resources.ResourceLocation;
import org.jetbrains.annotations.ApiStatus;

import java.util.Collection;
import java.util.Collections;
import java.util.Set;
import java.util.function.Function;

@ApiStatus.Internal
public final class MachineUnbakedModel implements UnbakedModel {
    public static final MachineUnbakedModel INSTANCE = new MachineUnbakedModel();
    public static final ResourceLocation MACHINE_MARKER = Constant.id("autogenerated/machine");

    private MachineUnbakedModel() {}

    @Override
    public Collection<ResourceLocation> getDependencies() {
        return Collections.emptyList();
    }

    @Override
    public Collection<Material> getMaterials(Function<ResourceLocation, UnbakedModel> unbakedModelGetter, Set<Pair<String, String>> unresolvedTextureReferences) {
        ImmutableList.Builder<Material> builder = ImmutableList.builderWithExpectedSize(17);
        builder.add(SpriteUtil.identifier(MachineModelRegistry.MACHINE));
        builder.add(SpriteUtil.identifier(MachineModelRegistry.MACHINE_SIDE));

        builder.add(SpriteUtil.identifier(MachineBakedModel.MACHINE_ENERGY_IN));
        builder.add(SpriteUtil.identifier(MachineBakedModel.MACHINE_ENERGY_OUT));
        builder.add(SpriteUtil.identifier(MachineBakedModel.MACHINE_ENERGY_BOTH));

        builder.add(SpriteUtil.identifier(MachineBakedModel.MACHINE_FLUID_IN));
        builder.add(SpriteUtil.identifier(MachineBakedModel.MACHINE_FLUID_OUT));
        builder.add(SpriteUtil.identifier(MachineBakedModel.MACHINE_FLUID_BOTH));

        builder.add(SpriteUtil.identifier(MachineBakedModel.MACHINE_ITEM_IN));
        builder.add(SpriteUtil.identifier(MachineBakedModel.MACHINE_ITEM_OUT));
        builder.add(SpriteUtil.identifier(MachineBakedModel.MACHINE_ITEM_BOTH));

        builder.add(SpriteUtil.identifier(MachineBakedModel.MACHINE_GAS_IN));
        builder.add(SpriteUtil.identifier(MachineBakedModel.MACHINE_GAS_OUT));
        builder.add(SpriteUtil.identifier(MachineBakedModel.MACHINE_GAS_BOTH));

        builder.add(SpriteUtil.identifier(MachineBakedModel.MACHINE_ANY_IN));
        builder.add(SpriteUtil.identifier(MachineBakedModel.MACHINE_ANY_OUT));
        builder.add(SpriteUtil.identifier(MachineBakedModel.MACHINE_ANY_BOTH));

        builder.addAll(SpriteUtil.identifiers(MachineBakedModel.TEXTURE_DEPENDENCIES));
        return builder.build();
    }

    @Override
    public BakedModel bake(ModelBakery loader, Function<Material, TextureAtlasSprite> textureGetter, ModelState rotationContainer, ResourceLocation modelId) {
        return MachineBakedModel.INSTANCE;
    }
}
